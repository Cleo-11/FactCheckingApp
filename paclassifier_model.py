# -*- coding: utf-8 -*-
"""PAClassifier Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lAk-KnD2LrVLEX9mOcKSZdJhzscdVB-r
"""

#--------------------------------------------------------------
# Include Libraries
#--------------------------------------------------------------
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay  # Ensure this import is here
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import PassiveAggressiveClassifier

#--------------------------------------------------------------
# Importing dataset using pandas dataframe
#--------------------------------------------------------------
from google.colab import drive
drive.mount('/content/drive')

df= pd.read_csv('/content/drive/MyDrive/FakeNewsDataset.csv')

# Inspect dataset
print(df.columns)  # ['idd', 'title', 'text', 'label']
print(df.head())

# Drop 'idd' column
df.drop(columns=['idd'], inplace=True)

# Combine 'title' and 'text' into a single column for richer features
df['combined_text'] = df['title'] + " " + df['text']

# Check for missing values in the combined_text column
print(f"Number of missing values: {df['combined_text'].isnull().sum()}")

# Fill missing values in combined_text with an empty string
df['combined_text'] = df['combined_text'].fillna("")

# Separate labels
y = df['label']  # Target variable

# Choose the feature column for training (use combined_text for better results)
X = df['combined_text']

# Split into training and test datasets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=53)

#--------------------------------------------------------------
# Building the Count and Tfidf Vectors
#--------------------------------------------------------------

# Initialize the CountVectorizer
count_vectorizer = CountVectorizer(stop_words='english')

# Fit and transform the training data
count_train = count_vectorizer.fit_transform(X_train)

# Transform the test set
count_test = count_vectorizer.transform(X_test)

# Initialize the TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)

# Fit and transform the training data
tfidf_train = tfidf_vectorizer.fit_transform(X_train)

# Transform the test set
tfidf_test = tfidf_vectorizer.transform(X_test)

#--------------------------------------------------------------
# Applying Passive Aggressive Classifier
#--------------------------------------------------------------

# Train Passive Aggressive Classifier
linear_clf = PassiveAggressiveClassifier(max_iter=50)
linear_clf.fit(tfidf_train, y_train)

# Generate predictions
pred = linear_clf.predict(tfidf_test)

# Evaluate the model
score = metrics.accuracy_score(y_test, pred)
print("Passive Aggressive Classifier Accuracy (TFIDF): {:.3f}".format(score))

# Confusion Matrix
cm = confusion_matrix(y_test, pred, labels=['FAKE', 'REAL'])
print("Confusion Matrix (TFIDF - Passive Aggressive):\n", cm)